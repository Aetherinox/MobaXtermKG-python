# ---------------------------------------------------------------------------------------
#   @parent     : github workflow
#   @desc       : publish release to github
#   @author     : Aetherinox
#   @url        : https://github.com/Aetherinox
# ---------------------------------------------------------------------------------------

name: "📦 Publish"
run-name: "📦 Publish"

# ---------------------------------------------------------------------------------------
#   triggers
# ---------------------------------------------------------------------------------------

on:
  workflow_dispatch:
    inputs:

      # ---------------------------------------------------------------------------------------
      #   Name of the plugin to use when creating the release zip filename
      #     e.g: mobapy-v1.0.0.zip
      # ---------------------------------------------------------------------------------------

      PLUGIN_NAME:
        description:  "📦 Name of Plugin"
        required:     true
        default:      'mobapy'
        type:         string

      # ---------------------------------------------------------------------------------------
      #   ENABLE:   the changelog generated in releases tab will only display single commits.
      #   DISABLE:  the changelog shows pull requests completed based on their labels
      # ---------------------------------------------------------------------------------------

      CHANGELOG_MODE_COMMIT:
        description:  "📑 Use Commits Instead of PRs"
        required:     true
        default:      true
        type:         boolean

      # ---------------------------------------------------------------------------------------
      #   ENABLE:   Will show all types of commits, including uncategorized
      #   DISABLE:  WIll only show actions that have been categorized using the format
      #                type(scope): description
      #                type: description
      # ---------------------------------------------------------------------------------------

      SHOW_UNCATEGORIZED:
        description:  "🗂️ Show Uncategorized Commits"
        required:     true
        default:      false
        type:         boolean

      # ---------------------------------------------------------------------------------------
      #   ENABLE:   released version will be marked as pre-release
      #   DISABLE:  release version will be marked as stable / normal release
      # ---------------------------------------------------------------------------------------

      PRERELEASE:
        description:  "🧪 Build RC (Pre-release)"
        required:     true
        default:      false
        type:         boolean

      # ---------------------------------------------------------------------------------------
      #   Release Candidate version number
      #   this will be added to the end of your released app in the releases page.
      #     e.g: mobapy-v1.0.0-rc.1
      # ---------------------------------------------------------------------------------------

      VERSION_RC:
        description:  "🧪 RC (Pre-release) Ver (mobapy-rc.v1)"
        required:     false
        type:         string
        default:      "1"

# ---------------------------------------------------------------------------------------
#   jobs
# ---------------------------------------------------------------------------------------

jobs:

    # ---------------------------------------------------------------------------------------
    #   JOB > INITIALIZE
    # ---------------------------------------------------------------------------------------

    job-initialize:
        name: >-
          📦 Initialize
        runs-on: ubuntu-latest
        outputs:
          package_version: ${{ steps.task_initialize_package_version.outputs.PACKAGE_VERSION }}
        permissions:
            contents: write
            packages: write
        steps:

            # ---------------------------------------------------------------------------------------
            #   Job > Initialize > Start
            # ---------------------------------------------------------------------------------------

            - name: "✅ Start"
              id: task_initialize_start
              run: |
                    echo "Starting build"

            # ---------------------------------------------------------------------------------------
            #   Job > Initialize > Checkout
            # ---------------------------------------------------------------------------------------

            - name: "☑️ Checkout"
              id: task_initialize_checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            # ---------------------------------------------------------------------------------------
            #   Package Version > Set
            #   Get version from package.json VERSION value
            # ---------------------------------------------------------------------------------------

            - name: "👁️‍🗨️ Package Version › Get"
              id: task_initialize_package_version
              run: |
                VER=$(cat package.json | jq -r '.version')
                echo "PACKAGE_VERSION=$VER" >> $GITHUB_OUTPUT

            # ---------------------------------------------------------------------------------------
            #   Package Version > Print (Debug)
            # ---------------------------------------------------------------------------------------

            - name: "👁️‍🗨️ Package Version › Print"
              id: task_initialize_package_version_print
              run: |
                echo "VERSION: ${{ steps.task_initialize_package_version.outputs.PACKAGE_VERSION }}"

    # ---------------------------------------------------------------------------------------
    #   Job > NPM
    # ---------------------------------------------------------------------------------------

    job-npm:
        name: >-
          📦 NPM
        runs-on: ubuntu-latest
        needs: [ job-initialize ]
        env:
          PACKAGE_VERSION: ${{ needs.job-initialize.outputs.package_version }}
        permissions:
            contents: write
            packages: write
        steps:

            # ---------------------------------------------------------------------------------------
            #   Dist Releases > Checkout
            # ---------------------------------------------------------------------------------------

            - name: "☑️ Checkout"
              id: task_release_checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            # ---------------------------------------------------------------------------------------
            #   Debug : View passed values
            # ---------------------------------------------------------------------------------------

            - name: "⚙️ Debug › Passed Values"
              id: task_npm_debug_print_vals_1
              run: |
                echo "VERSION ............. ${{ env.PACKAGE_VERSION }}"

            # ---------------------------------------------------------------------------------------
            #   Dist Releases > Install package via NPM
            # ---------------------------------------------------------------------------------------

            - name: "🪪 Install Dependencies"
              id: task_release_npm_install
              run: |
                npm install

            # ---------------------------------------------------------------------------------------
            #   Dist Releases > Execute npm generate so that a uuid and guid can be created
            # ---------------------------------------------------------------------------------------

            - name: "🪪 Generate IDs"
              id: task_release_npm_env_generate
              run: |
                npm run release:generate

    # ---------------------------------------------------------------------------------------
    #   JOBS > BUILD > LINUX
    # ---------------------------------------------------------------------------------------

    # job-build
    build:
        name: >-
          🐧 Build (Linux)
        runs-on: ubuntu-latest
        needs: [ job-initialize, job-npm ]
        env:
          PACKAGE_VERSION: ${{ needs.job-initialize.outputs.package_version }}
        outputs:
          package_lin_path: ${{ steps.build_handle_tar.outputs.PACKAGE_LIN_PATH }}
          package_lin_file: ${{ steps.build_handle_tar.outputs.PACKAGE_LIN_FILE }}
        steps:
            - name: "✅ Start"
              run: |
                    echo "Starting build"

            # ---------------------------------------------------------------------------------------
            #   Job > Build > Checkout
            # ---------------------------------------------------------------------------------------

            - name: "☑️ Checkout"
              id: task_build_checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            # ---------------------------------------------------------------------------------------
            #   Debug > View passed values
            # ---------------------------------------------------------------------------------------

            - name: "⚙️ Debug › Passed Values"
              id: task_build_debug_print_vals_1
              run: |
                echo "VERSION ............. ${{ env.PACKAGE_VERSION }}"

            # ---------------------------------------------------------------------------------------
            #   Python > Install
            #
            #   development station used v3.12.4
            # ---------------------------------------------------------------------------------------

            - name: "🐍 Python › Setup"
              id: task_build_python_setup
              uses: actions/setup-python@v5
              with:
                python-version: '3.9'

            # ---------------------------------------------------------------------------------------
            #   Python > Dependencies
            #
            #   development station used v6.3.0
            # ---------------------------------------------------------------------------------------

            - name: "🐍 Python › Build Tools"
              id: task_build_python_tools
              # PyInstaller >=6.0 results in significantly more antivirus false positives
              run: |
                python -m pip install --upgrade pip
                pip install pyinstaller==5.3.0

            # ---------------------------------------------------------------------------------------
            #   build python script
            #
            #   creates folder 'build'
            #   temp files placed in 'tnp'
            #   will compile files from 'src' folder
            # ---------------------------------------------------------------------------------------

            - name: "🐍 Python › Build"
              id: build_handle_tar
              run: |
                echo "Starting Linux Build: Mobaxterm Utility"
                mkdir build tmp

                pyinstaller -Fwc "src/mobaxtgen_cli.py" --version-file="src/verinfo.py" -i "src/moba.ico" --distpath "build" --workpath "tmp"

                PACKAGE_PATH=$(find build/mobaxtgen_cli -type f -printf "%f\n")
                echo "PACKAGE_LIN_PATH=build/$PACKAGE_PATH" >> $GITHUB_OUTPUT

                PACKAGE_FILE=$(find build/mobaxtgen_cli -type f -printf "%f\n")
                echo "PACKAGE_LIN_FILE=$PACKAGE_FILE" >> $GITHUB_OUTPUT
            # ---------------------------------------------------------------------------------------
            #   List structure
            # ---------------------------------------------------------------------------------------

            - name: "🐍 Python › List Structure (./Root)"
              id: build_handle_list_structure_root
              run: |
                ls

            - name: "🐍 Python › List Structure (./Build)"
              id: build_handle_list_structure_build
              run: |
                ls build

            # ---------------------------------------------------------------------------------------
            #   Debug : View passed values
            # ---------------------------------------------------------------------------------------

            - name: "⚙️ Debug › Passed Values"
              id: task_build_debug_print_vals_2
              run: |
                echo "VERSION ............. ${{ env.PACKAGE_VERSION }}"
                echo "PACKAGE FILENAME .... ${{ steps.build_handle_tar.outputs.PACKAGE_LIN_PATH }}"

            # ---------------------------------------------------------------------------------------
            #   Upload Artifact
            # ---------------------------------------------------------------------------------------

            - name: "📁 Upload › Artifact"
              uses: actions/upload-artifact@v4
              with:
                name: linux
                path: build/

    # ---------------------------------------------------------------------------------------
    #   JOBS > BUILD > WINDOWS
    # ---------------------------------------------------------------------------------------

    job-build-windows:
        name: >-
          🪟 Build (Windows)
        runs-on: windows-latest
        needs: [ job-initialize, job-npm ]
        env:
          PACKAGE_VERSION: ${{ needs.job-initialize.outputs.package_version }}
        outputs:
          package_win_path: ${{ steps.build_handle_exe.outputs.PACKAGE_WIN_PATH }}
          package_win_file: ${{ steps.build_handle_exe.outputs.PACKAGE_WIN_FILE }}
        steps:
            - name: "✅ Start"
              run: |
                    echo "Starting build"

            # ---------------------------------------------------------------------------------------
            #   Job > Build > Checkout
            # ---------------------------------------------------------------------------------------

            - name: "☑️ Checkout"
              id: task_build_checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            # ---------------------------------------------------------------------------------------
            #   Debug > View passed values
            # ---------------------------------------------------------------------------------------

            - name: "⚙️ Debug › Passed Values"
              id: task_build_debug_print_vals_1
              run: |
                echo "VERSION ............. ${{ env.PACKAGE_VERSION }}"

            # ---------------------------------------------------------------------------------------
            #   Python > Install
            #
            #   development station used v3.12.4
            # ---------------------------------------------------------------------------------------

            - name: "🐍 Python › Setup"
              id: task_build_python_setup
              uses: actions/setup-python@v5
              with:
                python-version: '3.9'

            # ---------------------------------------------------------------------------------------
            #   Python > Dependencies
            #
            #   development station used v6.3.0
            # ---------------------------------------------------------------------------------------

            - name: "🐍 Python › Build Tools"
              id: task_build_python_tools
              # PyInstaller >=6.0 results in significantly more antivirus false positives
              run: |
                python -m pip install --upgrade pip
                pip install pyinstaller==5.3.0

            # ---------------------------------------------------------------------------------------
            #   build python script
            #
            #   creates folder 'build'
            #   temp files placed in 'tnp'
            #   will compile files from 'src' folder
            # ---------------------------------------------------------------------------------------

            - name: "🐍 Python › Build"
              id: build_handle_exe
              run: |
                echo "Starting Windows Build: Mobaxterm Utility"
                mkdir build, tmp

                pyinstaller -Fwc "src/mobaxtgen_cli.py" --version-file="src/verinfo.py" -i "src/moba.ico" --distpath "build" --workpath "tmp"

                $exe_name = Get-ChildItem -Filter build/*.exe -Name
                echo "PACKAGE_WIN_PATH=build/$exe_name" >> $env:GITHUB_OUTPUT
                echo "PACKAGE_WIN_FILE=$exe_name" >> $env:GITHUB_OUTPUT

            # ---------------------------------------------------------------------------------------
            #   List structure
            # ---------------------------------------------------------------------------------------

            - name: "🐍 Python › List Structure (./Root)"
              id: build_handle_list_structure_root
              run: |
                ls

            - name: "🐍 Python › List Structure (./Build)"
              id: build_handle_list_structure_build
              run: |
                ls build

            # ---------------------------------------------------------------------------------------
            #   Debug : View passed values
            #
            #   PACKAGE_VERSION         : 1.2.0
            #   PACKAGE_WIN_PATH    : build/mobaxtgen_cli.exe
            #   PACKAGE_EXE_WIN         : mobaxtgen_cli.exe
            # ---------------------------------------------------------------------------------------

            - name: "⚙️ Debug › Passed Values"
              id: task_build_debug_print_vals_2
              run: |
                echo "VERSION ............. ${{ env.PACKAGE_VERSION }}"
                echo "PACKAGE FILENAME .... ${{ steps.build_handle_exe.outputs.PACKAGE_WIN_PATH }}"
                echo "PACKAGE EXE..... .... ${{ steps.build_handle_exe.outputs.PACKAGE_WIN_FILE }}"

            # ---------------------------------------------------------------------------------------
            #   Upload Artifact
            # ---------------------------------------------------------------------------------------

            - name: "📁 Upload › Artifact"
              uses: actions/upload-artifact@v4
              with:
                name: windows
                path: build/

    # ---------------------------------------------------------------------------------------
    #   Job > Release > Github
    # ---------------------------------------------------------------------------------------

    job-release:
        name: >-
          📦 Publish › Release
        runs-on: ubuntu-latest
        needs: [ job-initialize, job-npm, build, job-build-windows ]
        env:
          PACKAGE_VERSION: ${{ needs.job-initialize.outputs.package_version }}
          PACKAGE_WIN_PATH: ${{ needs.job-build-windows.outputs.package_win_path }}
          PACKAGE_WIN_FILE: ${{ needs.job-build-windows.outputs.package_win_file }}
          PACKAGE_LIN_PATH: ${{ needs.job-build-windows.outputs.package_lin_path }}
          PACKAGE_LIN_FILE: ${{ needs.job-build-windows.outputs.package_lin_file }}
        permissions:
            contents: write
            packages: write
        steps:

            # ---------------------------------------------------------------------------------------
            #   Dist Releases > Checkout
            # ---------------------------------------------------------------------------------------

            - name: "☑️ Checkout"
              id: task_release_checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            # ---------------------------------------------------------------------------------------
            #   Dist Releases > Print Version Debug
            # ---------------------------------------------------------------------------------------

            - name: "⚙️ Debug › Passed Values"
              id: task_release_debug_print_vals_1
              run: |
                echo "VERSION ............. ${{ env.PACKAGE_VERSION }}"
                echo "WIN PATH ............ ${{ env.PACKAGE_WIN_PATH }}"
                echo "WIN FILE ............ ${{ env.PACKAGE_WIN_FILE }}"
                echo "LIN PATH ............ ${{ env.PACKAGE_LIN_PATH }}"
                echo "LIN FILE ............ ${{ env.PACKAGE_LIN_FILE }}"

            # ---------------------------------------------------------------------------------------
            #   Download Windows & Linux Artifacts
            #
            #   📁 ./dist:
            #       📄 mobaxtgen_cli.exe
            #       📁 linux
            #           📄 mobaxtgen_cli
            #       📁 windows
            #           📄 mobaxtgen_cli.exe
            # ---------------------------------------------------------------------------------------

            - name: "📁 Download › Saved Artifacts"
              uses: actions/download-artifact@v4
              with:
                path: dist/

            # ---------------------------------------------------------------------------------------
            #   Debug > Display Artifacts
            # ---------------------------------------------------------------------------------------

            - name: "⚙️ Debug › Show Cleanup"
              run: |
                echo "Showing Original Structure"
                ls -R
                rm /dist/mobaxtgen_cli.exe

            # ---------------------------------------------------------------------------------------
            #   .ENV > Get
            #   Get guid and uuid from env variable generated by npm
            # ---------------------------------------------------------------------------------------

            - name: "🪪 .ENV › Get"
              id: task_release_dotenv_get
              uses: falti/dotenv-action@v1

            # ---------------------------------------------------------------------------------------
            #   .ENV > Print (Debug)
            #   Show guid and uuid from env variable generated by npm
            # ---------------------------------------------------------------------------------------

            - name: "🪪 .ENV › Read"
              id: task_dotenv_debug_print
              run: |
                echo "GUID: ${{ steps.task_release_dotenv_get.outputs.GUID }}"
                echo "UUID: ${{ steps.task_release_dotenv_get.outputs.UUID }}"
